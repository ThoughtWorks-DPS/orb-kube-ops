# src/commands/setup-packages.yaml

description: >
  Install specified kubernetes and testing tool versions on executor. Debian/Ubuntu and Alpine supported.

  Note: for circleci Ubuntu machine images, you must set use-sudo:false

parameters:
  use-sudo:
    description: package needs to be installed with elevated privileges
    type: boolean
    default: false

  # will default to the version installed on the executor unless overridden.
  # may specify a specific version or latest
  kubectl-version:
    type: string
    default: blank
  helm-version:
    type: string
    default: blank
  bats-version:
    type: string
    default: blank
  sonobuoy-version:
    type: string
    default: blank
  inspec-version:
    type: string
    default: blank
  awspec-version:
    type: string
    default: blank
  argocd-version:
    type: string
    default: blank
  istioctl-version:
    type: string
    default: blank
  terraform-version:
    type: string
    default: blank
  datadog-version:
    type: string
    default: blank

steps:
  - run:
      name: confirm dependencies
      command: <<include(scripts/dependencies.sh)>>
  - unless:
      condition:
        equal: [ << parameters.kubectl-version >>, "blank" ]
      steps:
        - run:
            name: install kubectl << parameters.kubectl-version >>
            environment:
              USE_SUDO: << parameters.use-sudo >>
              INSTALL_KUBECTL_VERSION: << parameters.kubectl-version >>
            command: <<include(scripts/install_kubectl.sh)>>
  - unless:
      condition:
        equal: [ << parameters.helm-version >>, "blank" ]
      steps:
        - run:
            name: install helm << parameters.helm-version >>
            environment:
              USE_SUDO: << parameters.use-sudo >>
              INSTALL_HELM_VERSION: << parameters.helm-version >>
            command: <<include(scripts/install_helm.sh)>>
  - unless:
      condition:
        equal: [ << parameters.bats-version >>, "blank" ]
      steps:
        - run:
            name: install bats << parameters.bats-version >>
            environment:
              USE_SUDO: << parameters.use-sudo >>
              INSTALL_BATS_VERSION: << parameters.bats-version >>
            command: <<include(scripts/install_bats.sh)>>
  - unless:
      condition:
        equal: [ << parameters.sonobuoy-version >>, "blank" ]
      steps:
        - run:
            name: install sonobuoy << parameters.sonobuoy-version >>
            environment:
              USE_SUDO: << parameters.use-sudo >>
              INSTALL_SONOBUOY_VERSION: << parameters.sonobuoy-version >>
            command: <<include(scripts/install_sonobuoy.sh)>>
  - unless:
      condition:
        equal: [ << parameters.inspec-version >>, "blank" ]
      steps:
        - run:
            name: install inspec << parameters.inspec-version >>
            environment:
              USE_SUDO: << parameters.use-sudo >>
              INSTALL_INSPEC_VERSION: << parameters.inspec-version >>
            command: <<include(scripts/install_inspec.sh)>>
  - unless:
      condition:
        equal: [ << parameters.awspec-version >>, "blank" ]
      steps:
        - run:
            name: install awspec << parameters.awspec-version >>
            environment:
              USE_SUDO: << parameters.use-sudo >>
              INSTALL_AWSPEC_VERSION: << parameters.awspec-version >>
            command: <<include(scripts/install_awspec.sh)>>
  - unless:
      condition:
        equal: [ << parameters.argocd-version >>, "blank" ]
      steps:
        - run:
            name: install argocd << parameters.argocd-version >>
            environment:
              USE_SUDO: << parameters.use-sudo >>
              INSTALL_ARGOCD_VERSION: << parameters.argocd-version >>
            command: <<include(scripts/install_argocd.sh)>>
  - unless:
      condition:
        equal: [ << parameters.istioctl-version >>, "blank" ]
      steps:
        - run:
            name: install istioctl << parameters.istioctl-version >>
            environment:
              USE_SUDO: << parameters.use-sudo >>
              INSTALL_ISTIOCTL_VERSION: << parameters.istioctl-version >>
            command: <<include(scripts/install_istioctl.sh)>>
  - unless:
      condition:
        equal: [ << parameters.terraform-version >>, "blank" ]
      steps:
        - run:
            name: install terraform << parameters.terraform-version >>
            environment:
              USE_SUDO: << parameters.use-sudo >>
              INSTALL_TERRAFORM_VERSION: << parameters.terraform-version >>
            command: <<include(scripts/install_terraform.sh)>>
  - unless:
      condition:
        equal: [ << parameters.datadog-version >>, "blank" ]
      steps:
        - run:
            name: install datadog cli << parameters.datadog-version >>
            environment:
              USE_SUDO: << parameters.use-sudo >>
              INSTALL_DATADOG_VERSION: << parameters.datadog-version >>
            command: <<include(scripts/install_datadog.sh)>>
